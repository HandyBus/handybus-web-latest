'use client';

import { useCallback, useRef, useState } from 'react';
import Rating from '@/components/rating/Rating';

interface Review {
  value?: number;
  content?: string;
  userId?: number;
  concertId?: number;
}

const Review = ({
  value = 5,
  content = 'ÏöîÎ≤àÏóêÎèÑ ÏÑ∏Î∏êÌã¥ Ï∫êÎüøÎûúÎìú ÎßâÏΩòÎßå Í∞ÄÍ≤åÎêòÏñ¥ Ï∞®ÎåÄÏ†àÎ°ú Ìé∏ÌïòÍ≤å Îã§ÎÖÄÏôîÏäµÎãàÎã§~~!! Î≤ÑÏä§ÏïàÏóê Ï∂©Ï†ÑÍ∏∞ÎèÑ Íµ¨ÎπÑÎêòÏñ¥ ÏûàÏñ¥ÏÑú ÏïÑÏ£º Ìé∏ÌñàÏñ¥Ïöî~!! Îã§ÏùåÏóêÎèÑ ÌïòÎ£®Îßå Í∞ÄÍ≤å ÎêúÎã§Î©¥ Ìï∏ÎîîÎ≤ÑÏä§ Ï∞®ÎåÄÏ†àÎ°ú Ïã†Ï≤≠ÌïòÎ†§Íµ¨ÏöîüòÜ Îã§ÏùåÎ≤àÏóêÎèÑ Ìï∏ÎîîÎ≤ÑÏä§ÏôÄ Ìï®ÍªòÌï†Í±∞ÏóêÏöîüíö',
  userId = 1,
  concertId = 1,
}: Review) => {
  const [clamped, setClamped] = useState(false);
  const [useClamp, setUseClamp] = useState(true);

  const prevWidth = useRef(0);

  const ref = useCallback(
    (node: HTMLParagraphElement | null) => {
      if (node !== null) {
        const resizeObserver = new ResizeObserver((entries) => {
          for (const entry of entries) {
            console.log(prevWidth);
            if (entry.target.clientWidth === prevWidth.current) continue;
            if (!useClamp) continue;
            prevWidth.current = entry.target.clientWidth;
            setClamped(entry.target.scrollHeight > entry.target.clientHeight);
          }
        });
        resizeObserver.observe(node);

        return () => {
          resizeObserver.unobserve(node);
        };
      }
    },
    [useClamp],
  );

  return (
    <div className="flex flex-col gap-[10px] rounded-[16px] bg-grey-50 p-16">
      <Rating size="medium" value={value} />
      <p
        ref={ref}
        className={`${useClamp ? 'line-clamp-2' : ''} overflow-hidden text-14 font-500 text-grey-600-sub`}
      >
        {`${userId}` + `${concertId}` + content}
      </p>
      {clamped && (
        <span onClick={() => setUseClamp((b) => !b)}>
          {useClamp ? 'Îçî Î≥¥Í∏∞' : 'Ï†ëÍ∏∞'}
        </span>
      )}
    </div>
  );
};

export default Review;
